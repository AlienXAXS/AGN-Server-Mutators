/*******************************************************************************
 * AGN_CrateType_Beacon generated by Eliot.UELib using UE Explorer.
 * Eliot.UELib ? 2009-2015 Eliot van Uytfanghe. All rights reserved.
 * http://eliotvu.com
 *
 * All rights belong to their respective owners.
 *******************************************************************************/
class AGN_CrateType_Beacon extends AGN_CrateType
    transient
    config(AGN_Crates);

var class<Rx_Weapon> WeaponClass;
var array< class<Rx_Weapon> > BeaconType;

function string GetGameLogMessage(Rx_PRI RecipientPRI, AGN_CratePickup CratePickup)
{
    return ((((((("GAME" $ Chr(2)) $ "Crate;") $ Chr(2)) $ "`beacon`") $ Chr(2)) $ "by") $ Chr(2)) $ class'Rx_Game'.static.GetPRILogName(RecipientPRI);
    //return ReturnValue;    
}

function string GetPickupMessage()
{
    // End:0x54
    if(WeaponClass == class'Rx_Weapon_NukeBeacon')
    {
        return Repl("You got a `beacon`!", "`beacon`", "Nuclear Strike Beacon", false);
    }
    // End:0x8B
    else
    {
        return Repl("You got an `beacon`!", "`beacon`", "Ion Cannon Beacon", false);
    }
    //return ReturnValue;    
}

function float GetProbabilityWeight(Rx_Pawn Recipient, AGN_CratePickup CratePickup)
{
    local Rx_Building Building;
    local float probability;

    probability = super.GetProbabilityWeight(Recipient, CratePickup);
    // End:0x133
    foreach CratePickup.AllActors(class'Rx_Building', Building)
    {
        // End:0x132
        if((((Recipient.GetTeamNum() == 0) && Rx_Building_GDI_InfantryFactory(Building) != none) && Rx_Building_GDI_InfantryFactory(Building).IsDestroyed()) || ((Recipient.GetTeamNum() == 1) && Rx_Building_Nod_InfantryFactory(Building) != none) && Rx_Building_Nod_InfantryFactory(Building).IsDestroyed())
        {
        }        
    }    
    return probability;
    //return ReturnValue;    
}

function ExecuteCrateBehaviour(Rx_Pawn Recipient, Rx_PRI RecipientPRI, AGN_CratePickup CratePickup)
{
    local Rx_InventoryManager InvManager;

    WeaponClass = BeaconType[Rand(BeaconType.Length)];
    InvManager = Rx_InventoryManager(Recipient.InvManager);
    // End:0xA2
    if(InvManager.PrimaryWeapons.Find(WeaponClass) < 0)
    {
        WeaponClass = BeaconType[Rand(BeaconType.Length)];
    }
    InvManager.PrimaryWeapons.AddItem(WeaponClass);
    // End:0x150
    if(InvManager.FindInventoryType(WeaponClass) != none)
    {
        InvManager.SetCurrentWeapon(Rx_Weapon(InvManager.FindInventoryType(WeaponClass)));
    }
    // End:0x1A1
    else
    {
        InvManager.SetCurrentWeapon(Rx_Weapon(InvManager.CreateInventory(WeaponClass, false)));
    }
    //return;    
}

defaultproperties
{
    BeaconType(0)=class'Rx_Weapon_NukeBeacon'
    BeaconType(1)=class'Rx_Weapon_IonCannonBeacon'
    BroadcastMessageIndex=22
    PickupSound=SoundCue'Rx_Pickups.Sounds.SC_Pickup_Ammo'
}